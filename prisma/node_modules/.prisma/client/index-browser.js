
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.30.3
 * Query Engine version: b8c35d44de987a9691890b3ddf3e2e7effb9bf20
 */
Prisma.prismaVersion = {
  client: "2.30.3",
  engine: "b8c35d44de987a9691890b3ddf3e2e7effb9bf20"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.LocalidadScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre'
});

exports.Prisma.TipoCursoScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion'
});

exports.Prisma.CursoScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  tipoCursoId: 'tipoCursoId'
});

exports.Prisma.LocalidadOnCursoScalarFieldEnum = makeEnum({
  cursoId: 'cursoId',
  localidadId: 'localidadId',
  nombreMostrar: 'nombreMostrar',
  descripcion: 'descripcion'
});

exports.Prisma.DestinatarioOnCursoScalarFieldEnum = makeEnum({
  cursoId: 'cursoId',
  destinatarioId: 'destinatarioId',
  descripcion: 'descripcion',
  nombreMostrar: 'nombreMostrar'
});

exports.Prisma.AlumnoOnCursoActivoScalarFieldEnum = makeEnum({
  cursoActivoId: 'cursoActivoId',
  alumnoId: 'alumnoId',
  descripcion: 'descripcion',
  nombreMostrar: 'nombreMostrar'
});

exports.Prisma.AlumnoScalarFieldEnum = makeEnum({
  id: 'id',
  nroDocumento: 'nroDocumento',
  apellido: 'apellido',
  nombre: 'nombre',
  fechaNacimiento: 'fechaNacimiento',
  email: 'email',
  celular: 'celular',
  domicilio: 'domicilio',
  barrio: 'barrio',
  localidadId: 'localidadId'
});

exports.Prisma.DestinatariosScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre'
});

exports.Prisma.SalasScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  localidadId: 'localidadId'
});

exports.Prisma.CursosActivosScalarFieldEnum = makeEnum({
  id: 'id',
  nombreMostrar: 'nombreMostrar',
  activo: 'activo',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  horario: 'horario',
  cupos: 'cupos',
  descripcion: 'descripcion',
  salaId: 'salaId',
  localidadId: 'localidadId',
  cursoId: 'cursoId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  Localidad: 'Localidad',
  TipoCurso: 'TipoCurso',
  Curso: 'Curso',
  LocalidadOnCurso: 'LocalidadOnCurso',
  DestinatarioOnCurso: 'DestinatarioOnCurso',
  AlumnoOnCursoActivo: 'AlumnoOnCursoActivo',
  Alumno: 'Alumno',
  Destinatarios: 'Destinatarios',
  Salas: 'Salas',
  CursosActivos: 'CursosActivos'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
